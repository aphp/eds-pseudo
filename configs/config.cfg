[paths]
train = null
dev = null
vectors = null
init_tok2vec = null
#bert = "/export/home/share/datascientists/models/camembert-base"
bert = "camembert-base"

[system]
gpu_allocator = "pytorch"
seed = 0

[nlp]
lang = "eds"
#pipeline = ["tok2vec","ner","clean-entities"]
# Pipeline with only rule-based methods:
pipeline = ["tok2vec","clean-entities","dates","rules","structured"]
# Pipeline with the rule-based methods we need for toulouse
#pipeline = ["tok2vec","ner","clean-entities","dates","rules"]
# Pipeline with all the methods:
#pipeline = ["tok2vec","ner","clean-entities","dates","addresses","rules","structured"]
batch_size = 128
disabled = []
before_creation = null
after_creation = null
after_pipeline_creation = null

[components]

[components.ner]
factory = "nested_ner"
scorer = {"@scorers": "spacy.ner_scorer.v1"}
ent_labels = ["DATE","LASTNAME","FIRSTNAME","EMAIL","PHONE","BIRTHDATE","HOSPITAL","CITY","ZIP_CODE","STREET_ADDRESS","PATIENT_ID","VISIT_ID","EM_ID","OTHER_ID","SSN"]

[components.clean-entities]
factory = "clean-entities"

[components.ner.model]
@architectures = "eds.stack_crf_ner_model.v1"
mode = "joint"

#[components.ner]
#factory = "ner"
##scorer = {"@scorers": "eds.nested_ner_scorer.v1"}
#scorer = {"@scorers": "spacy.ner_scorer.v1"}
#
#[components.ner.model]
#@architectures = "spacy.TransitionBasedParser.v2"
#state_type = "ner"
#extra_state_tokens = false
#hidden_width = 64
#maxout_pieces = 2
#use_upper = false
#nO = null

[components.ner.model.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
grad_factor = 1.0
pooling = {"@layers":"reduce_mean.v1"}
upstream = "*"

[components.dates]
factory = "pseudonymisation-dates"

[components.addresses]
factory = "pseudonymisation-addresses"

[components.rules]
factory = "pseudonymisation-rules"
pattern_keys = ["PHONE","EMAIL","SSN","PATIENT_ID"]

[components.structured]
factory = "structured-data-matcher"

[components.tok2vec]
factory = "transformer"
max_batch_items = 4096
set_extra_annotations = {"@annotation_setters":"spacy-transformers.null_annotation_setter.v1"}

[components.tok2vec.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = ${paths.bert}
# name = "camembert-base"
mixed_precision = false

[components.tok2vec.model.get_spans]
@span_getters = "spacy-transformers.strided_spans.v1"
window = 128
stride = 64

[components.tok2vec.model.grad_scaler_config]

[components.tok2vec.model.tokenizer_config]
use_fast = true

[components.tok2vec.model.transformer_config]

[corpora]

[corpora.train]
@readers = "eds-pseudonymisation.Corpus.v1"
path = ${paths.train}
max_length = 384
gold_preproc = false
limit = 0
augmenter = null
seed = ${system.seed}
shuffle = true
filter_expr = null

[corpora.dev]
@readers = "eds-pseudonymisation.Corpus.v1"
path = ${paths.dev}
max_length = 0
gold_preproc = false
limit = 0
augmenter = null

[training]
accumulate_gradient = 1
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
seed = ${system.seed}
gpu_allocator = ${system.gpu_allocator}
dropout = 0.1
patience = 1000
max_epochs = 100000000000
max_steps = 20000
eval_frequency = 100
frozen_components = []
annotating_components = []
before_to_disk = null

[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
size = 2000
discard_oversize = true
buffer = 256

[training.logger]
@loggers = "spacy.ConsoleLogger.v1"
progress_bar = true
#@loggers = "DVCLive.v1"

[training.optimizer]
@optimizers = "Adam.v1"
beta1 = 0.9
beta2 = 0.999
L2_is_weight_decay = true
L2 = 0.01
grad_clip = 1.0
use_averages = false
eps = 0.000001

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = ${training.max_steps}
initial_rate = 0.00005

[training.score_weights]
ents_f = 0.5
ents_p = 0.0
ents_r = 0.5
speed = 0.0
ents_per_type = null

[pretraining]

[initialize]
vectors = ${paths.vectors}
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
lookups = null
before_init = null
after_init = null

[initialize.components]

[initialize.tokenizer]
