[project]
name = "eds-pseudo"
version = "0.4.0"
description = "EDS-Pseudo is a hybrid model for detecting personally identifying entities in clinical reports"
readme = "README.md"
requires-python = ">=3.8,<4.0"
authors = [
  { name = "Perceval Wajsburt", email = "perceval.wajsburt@aphp.fr" },
  { name = "Alice Calliger", email = "alice.calliger@aphp.fr" },
  { name = "Basile Dura", email = "basile.dura-ext@aphp.fr" },
]
dependencies = [
  "edsnlp[ml]>=0.17.0",
  "transformers>=4.40",
  "sentencepiece>=0.1.96",
  "torch<2.5.0; python_version < '3.9'",
]

[project.entry-points."spacy_factories"]
"eds_pseudo.clean"           = "eds_pseudo.pipes.clean_entities:CleanEntities"
"eds_pseudo.addresses"       = "eds_pseudo.pipes.addresses.addresses:PseudonymisationAddresses"
"eds_pseudo.dates"           = "eds_pseudo.pipes.dates.dates:PseudonymisationDates"
"eds_pseudo.dates_normalizer"= "eds_pseudo.pipes.dates_normalizer.dates_normalizer:DatesNormalizer"
"eds_pseudo.simple_rules"    = "eds_pseudo.pipes.pseudonymisation.pseudonymisation:Pseudonymisation"
"eds_pseudo.context"         = "eds_pseudo.pipes.structured:ContextMatcher"
"eds_pseudo.merge"           = "eds_pseudo.pipes.merge_entities:MergeEntities"

# Deprecated entry points
"structured-data-matcher"    = "eds_pseudo.pipes.structured:ContextMatcher"
"pseudonymisation-rules"     = "eds_pseudo.pipes.pseudonymisation.pseudonymisation:Pseudonymisation"
"pseudonymisation-dates"     = "eds_pseudo.pipes.dates.dates:PseudonymisationDates"
"pseudonymisation-addresses" = "eds_pseudo.pipes.addresses.addresses:PseudonymisationAddresses"
"clean-entities"             = "eds_pseudo.pipes.clean_entities:CleanEntities"

[project.optional-dependencies]
dev = [
  "dvc>=2.37.0,<3.0.0; python_version >= '3.8'",
  "loguru>=0.6.0",
  "typer>=0.6.1",
  "polars",
  "pandas>=1.4.0",
  "tabulate",
  "pyarrow>=7.0.0",
  "pre-commit>=2.18.1",
  "pytest>=7.1.1",
  "pytest-cov>=3.0.0",
  "toml>=0.10.2",
  "wheel>=0.40.0",
  "babel",
  "accelerate>=0.21.0",
  "rich-logger>=0.3.0",
  "torch",
]
docs = [
  "mike>=1.1.2",
  "mkdocs-bibtex>=2.0.3",
  "mkdocs-gen-files>=0.3.4",
  "mkdocs-literate-nav>=0.4.1",
  "mkdocs-material>=9.2.0",
  "mkdocstrings>=0.20.0",
  "mkdocstrings-python>=1.1.0",
  "mkdocs-glightbox>=0.1.6",
  "mkdocs-autorefs>=0.4.1",
  "mkdocs-charts-plugin>=0.0.8",
]

[tool.uv.pip]
torch-backend = "auto"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = true
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 10
exclude = ["docs", "build", "tests"]
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false

[tool.pytest.ini_options]
testpaths = [
    "tests",
]

[tool.mypy]
plugins = "pydantic.mypy"

[tool.ruff]
fix = true
extend-exclude = [
    ".git",
    "__pycache__",
    "__init__.py",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "build",
]
line-length = 88
select = [
    "E",
    "F",
    "W",
    "I001"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "parents"

[tool.ruff.extend-per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["edsnlp"]
order-by-type = true

[tool.coverage.report]
include = [
    "eds_pseudo/*",
    "scripts/*",
]
omit = [
    "tests/*",
]
exclude_lines = [
    "def __repr__",
    "if __name__ == .__main__.:",
    "@overload",
    "pragma: no cover",
    "raise .*Error",
    "raise .*Exception",
    "warn\\(",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "Span.set_extension.*",
    "Doc.set_extension.*",
    "Token.set_extension.*",
]

[tool.setuptools]
packages = ["eds_pseudo"]

[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"
